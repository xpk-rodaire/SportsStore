@model SportsStore.Domain.Entities.ShippingDetails
@{
    ViewBag.Title = "SportStore: Checkout";
}
<h2>Check out now</h2>
<p>Please enter your details, and we'll ship your goods right away!</p>

@using (Html.BeginForm())
{
    @Html.ValidationSummary()
    <h3>Ship to</h3>
    <div class="form-group">
        <label>Name:</label>
        @Html.TextBoxFor(x => x.Name, new {@class = "form-control"})
    </div>
    <h3>Address</h3>

    foreach (var property in ViewData.ModelMetadata.Properties)
    {
        if (property.PropertyName != "Name" && property.PropertyName != "GiftWrap")
        {
            <div class="form‐group">
                <label>@(property.DisplayName ?? property.PropertyName)</label>
                @Html.TextBox(property.PropertyName, null, new { @class = "form-control" })
            </div>
        }
    }

    <h3>Options</h3>
    <div class="checkbox">
        <label>
            @Html.EditorFor(x => x.GiftWrap)
            Gift wrap these items
        </label>
    </div>

}
    @*You can see that the Checkout action method I added is decorated with
    the HttpPost attribute, which means that it will be invoked for a POST request—in this
    case, when the user submits the form.

        [HttpPost]
        public ViewResult Checkout(Cart cart, ShippingDetails shippingDetails)

    Once again, I am relying on the model binder
    system, both for the ShippingDetails parameter (which is created automatically using
    the HTTP form data) and the Cart parameter (which is created using the custom binder).*@
    
    <div class="text-center">
        <input class="btn btn-primary" type="submit" value="Complete order" />
    </div>
}